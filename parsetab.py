
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEASSIGN COMMA DEF DIVIDE ELSE EQ FALSE FILTER FOR GT IDENTIFIER IF LAMBDA LBRACE LPAREN LT MAP MINUS MULTIPLY NEQ NONE NUMBER PLUS PRINT RBRACE REDUCE RETURN RPAREN SEMICOLON STRING TRUE WHILEprogram : program statementprogram : statementstatement : IDENTIFIER ASSIGN expressionstatement : IF LPAREN expression RPAREN LBRACE program RBRACE\n                 | IF LPAREN expression RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE program RBRACEstatement : FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACE program RBRACEstatement : PRINT LPAREN expression RPARENstatement : DEF IDENTIFIER LPAREN parameter_list RPAREN LBRACE program RBRACEparameter_list : IDENTIFIER\n                      | parameter_list COMMA IDENTIFIER\n                      | emptystatement : RETURN expressionexpression : LAMBDA LPAREN parameter_list RPAREN expressionexpression : IDENTIFIER LPAREN argument_list RPARENargument_list : expression\n                     | argument_list COMMA expression\n                     | emptyexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expressionexpression : expression GT expression\n                  | expression LT expression\n                  | expression EQ expression\n                  | expression NEQ expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : TRUE\n                  | FALSEexpression : NONEexpression : IDENTIFIERempty :'
    
_lr_action_items = {'IDENTIFIER':([0,1,2,8,9,10,11,12,13,14,15,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,38,39,40,42,45,46,50,51,52,53,54,55,56,57,59,63,64,67,68,69,70,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[3,3,-2,16,20,-1,20,20,20,3,20,-13,20,-33,-28,-29,-30,-31,-32,-3,47,20,20,20,20,20,20,20,20,47,20,20,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,3,3,75,20,-15,20,3,3,3,3,-14,-4,-6,3,-9,3,3,3,3,-5,-7,]),'IF':([0,1,2,10,14,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,63,64,69,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[4,4,-2,-1,4,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,4,4,-15,4,4,4,4,-14,-4,-6,4,-9,4,4,4,4,-5,-7,]),'WHILE':([0,1,2,10,14,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,63,64,69,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[5,5,-2,-1,5,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,5,5,-15,5,5,5,5,-14,-4,-6,5,-9,5,5,5,5,-5,-7,]),'FOR':([0,1,2,10,14,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,63,64,69,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[6,6,-2,-1,6,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,6,6,-15,6,6,6,6,-14,-4,-6,6,-9,6,6,6,6,-5,-7,]),'PRINT':([0,1,2,10,14,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,63,64,69,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[7,7,-2,-1,7,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,7,7,-15,7,7,7,7,-14,-4,-6,7,-9,7,7,7,7,-5,-7,]),'DEF':([0,1,2,10,14,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,63,64,69,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[8,8,-2,-1,8,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,8,8,-15,8,8,8,8,-14,-4,-6,8,-9,8,8,8,8,-5,-7,]),'RETURN':([0,1,2,10,14,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,63,64,69,71,72,73,74,76,78,79,81,84,85,86,87,88,89,90,],[9,9,-2,-1,9,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,9,9,-15,9,9,9,9,-14,-4,-6,9,-9,9,9,9,9,-5,-7,]),'$end':([1,2,10,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,69,76,78,79,84,89,90,],[0,-2,-1,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,-15,-14,-4,-6,-9,-5,-7,]),'RBRACE':([2,10,17,20,21,22,23,24,25,26,46,50,51,52,53,54,55,56,57,59,69,71,72,76,78,79,81,84,87,88,89,90,],[-2,-1,-13,-33,-28,-29,-30,-31,-32,-3,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,-15,78,79,-14,-4,-6,84,-9,89,90,-5,-7,]),'ASSIGN':([3,],[11,]),'LPAREN':([4,5,6,7,9,11,12,13,15,16,18,19,20,32,33,34,35,36,37,38,39,42,45,68,70,],[12,13,14,15,19,19,19,19,19,31,40,19,42,19,19,19,19,19,19,19,19,19,19,19,19,]),'LAMBDA':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'STRING':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'TRUE':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'FALSE':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NONE':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'SEMICOLON':([17,20,21,22,23,24,25,26,29,46,50,51,52,53,54,55,56,57,59,65,69,76,78,79,84,89,90,],[-13,-33,-28,-29,-30,-31,-32,-3,45,-8,-19,-20,-21,-22,-23,-24,-25,-26,-27,73,-15,-14,-4,-6,-9,-5,-7,]),'RPAREN':([17,20,21,22,23,24,25,26,27,28,30,31,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,75,76,77,78,79,80,84,89,90,],[-13,-33,-28,-29,-30,-31,-32,-3,43,44,46,-34,-34,59,-34,-8,-10,66,-12,-19,-20,-21,-22,-23,-24,-25,-26,68,-27,69,-16,-18,-15,-11,-14,-17,-4,-6,83,-9,-5,-7,]),'PLUS':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[32,-33,-28,-29,-30,-31,-32,32,32,32,32,32,-19,-20,-21,-22,32,32,32,32,-27,32,32,-15,32,32,]),'MINUS':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[33,-33,-28,-29,-30,-31,-32,33,33,33,33,33,-19,-20,-21,-22,33,33,33,33,-27,33,33,-15,33,33,]),'MULTIPLY':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[34,-33,-28,-29,-30,-31,-32,34,34,34,34,34,34,34,-21,-22,34,34,34,34,-27,34,34,-15,34,34,]),'DIVIDE':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[35,-33,-28,-29,-30,-31,-32,35,35,35,35,35,35,35,-21,-22,35,35,35,35,-27,35,35,-15,35,35,]),'GT':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[36,-33,-28,-29,-30,-31,-32,36,36,36,36,36,-19,-20,-21,-22,36,36,36,36,-27,36,36,-15,36,36,]),'LT':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[37,-33,-28,-29,-30,-31,-32,37,37,37,37,37,-19,-20,-21,-22,37,37,37,37,-27,37,37,-15,37,37,]),'EQ':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[38,-33,-28,-29,-30,-31,-32,38,38,38,38,38,-19,-20,-21,-22,38,38,38,38,-27,38,38,-15,38,38,]),'NEQ':([17,20,21,22,23,24,25,26,27,28,30,41,50,51,52,53,54,55,56,57,59,61,65,69,76,77,],[39,-33,-28,-29,-30,-31,-32,39,39,39,39,39,-19,-20,-21,-22,39,39,39,39,-27,39,39,-15,39,39,]),'COMMA':([20,21,22,23,24,25,31,40,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,75,76,77,],[-33,-28,-29,-30,-31,-32,-34,-34,-34,-10,67,-12,-19,-20,-21,-22,-23,-24,-25,-26,67,-27,70,-16,-18,-15,-11,-14,-17,]),'LBRACE':([43,44,66,82,83,],[63,64,74,85,86,]),'ELSE':([78,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,63,64,74,85,86,],[1,71,72,81,87,88,]),'statement':([0,1,14,63,64,71,72,73,74,81,85,86,87,88,],[2,10,29,2,2,10,10,80,2,10,2,2,10,10,]),'expression':([9,11,12,13,15,19,32,33,34,35,36,37,38,39,42,45,68,70,],[17,26,27,28,30,41,50,51,52,53,54,55,56,57,61,65,76,77,]),'parameter_list':([31,40,],[48,58,]),'empty':([31,40,42,],[49,49,62,]),'argument_list':([42,],[60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program_multiple','parser.py',11),
  ('program -> statement','program',1,'p_program_single','parser.py',15),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','parser.py',20),
  ('statement -> IF LPAREN expression RPAREN LBRACE program RBRACE','statement',7,'p_statement_if','parser.py',25),
  ('statement -> IF LPAREN expression RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE','statement',11,'p_statement_if','parser.py',26),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE program RBRACE','statement',7,'p_statement_while','parser.py',34),
  ('statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACE program RBRACE','statement',11,'p_statement_for','parser.py',39),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','parser.py',44),
  ('statement -> DEF IDENTIFIER LPAREN parameter_list RPAREN LBRACE program RBRACE','statement',8,'p_statement_func_def','parser.py',49),
  ('parameter_list -> IDENTIFIER','parameter_list',1,'p_parameter_list','parser.py',53),
  ('parameter_list -> parameter_list COMMA IDENTIFIER','parameter_list',3,'p_parameter_list','parser.py',54),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser.py',55),
  ('statement -> RETURN expression','statement',2,'p_statement_return','parser.py',66),
  ('expression -> LAMBDA LPAREN parameter_list RPAREN expression','expression',5,'p_expression_lambda','parser.py',71),
  ('expression -> IDENTIFIER LPAREN argument_list RPAREN','expression',4,'p_expression_func_call','parser.py',76),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',80),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',81),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',82),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',93),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',94),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',95),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',96),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','parser.py',101),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','parser.py',102),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','parser.py',103),
  ('expression -> expression NEQ expression','expression',3,'p_expression_comparison','parser.py',104),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',109),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',114),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',118),
  ('expression -> TRUE','expression',1,'p_expression_bool','parser.py',122),
  ('expression -> FALSE','expression',1,'p_expression_bool','parser.py',123),
  ('expression -> NONE','expression',1,'p_expression_none','parser.py',127),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',132),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',137),
]
