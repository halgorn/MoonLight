Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     statement -> IDENTIFIER ASSIGN expression
Rule 4     expression -> expression PLUS expression
Rule 5     expression -> expression MINUS expression
Rule 6     expression -> expression MULTIPLY expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> LPAREN expression RPAREN
Rule 9     expression -> NUMBER
Rule 10    expression -> IDENTIFIER

Terminals, with rules where they appear

ASSIGN               : 3
DIVIDE               : 7
IDENTIFIER           : 3 10
LPAREN               : 8
MINUS                : 5
MULTIPLY             : 6
NUMBER               : 9
PLUS                 : 4
RPAREN               : 8
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 4 5 5 6 6 7 7 8
program              : 1 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) statement -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 3

    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 3

    statement                      shift and go to state 4

state 2

    (2) program -> statement .

    IDENTIFIER      reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 3

    (3) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 5


state 4

    (1) program -> program statement .

    IDENTIFIER      reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 5

    (3) statement -> IDENTIFIER ASSIGN . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 9
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 7

state 6

    (10) expression -> IDENTIFIER .

    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 10 (expression -> IDENTIFIER .)
    $end            reduce using rule 10 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 10 (expression -> IDENTIFIER .)


state 7

    (3) statement -> IDENTIFIER ASSIGN expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression

    IDENTIFIER      reduce using rule 3 (statement -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 3 (statement -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13


state 8

    (8) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 9
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 14

state 9

    (9) expression -> NUMBER .

    PLUS            reduce using rule 9 (expression -> NUMBER .)
    MINUS           reduce using rule 9 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 9 (expression -> NUMBER .)
    DIVIDE          reduce using rule 9 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    RPAREN          reduce using rule 9 (expression -> NUMBER .)


state 10

    (4) expression -> expression PLUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 9
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 15

state 11

    (5) expression -> expression MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 9
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 16

state 12

    (6) expression -> expression MULTIPLY . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 9
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 17

state 13

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 9
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 18

state 14

    (8) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13


state 15

    (4) expression -> expression PLUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 4 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 4 (expression -> expression PLUS expression .)
    $end            reduce using rule 4 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13

  ! MULTIPLY        [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 16

    (5) expression -> expression MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 5 (expression -> expression MINUS expression .)
    $end            reduce using rule 5 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13

  ! MULTIPLY        [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 17

    (6) expression -> expression MULTIPLY expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 6 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 6 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 6 (expression -> expression MULTIPLY expression .)
    IDENTIFIER      reduce using rule 6 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 6 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! MULTIPLY        [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 18

    (7) expression -> expression DIVIDE expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! MULTIPLY        [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 19

    (8) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression RPAREN .)

